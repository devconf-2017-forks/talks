How a Java dev benefited from transitioning to Go
--------------------------------------------------

How many times, when writing yet another collection of getters and setters, you've
dreamed about lightweight features available in dynamic languages? What if I tell
you there's a language that combines the best of both worlds: static and dynamic
typing? This language offers ease of writing code, with advanced features such
as a very efficient garbage collector and support for highly-scalable software
architecture, just to name a few. Have you ever wondered what all the fuss is
about Go? Why top companies such as Google, Red Hat, Docker, and CoreOS, just
to name a few, have chosen to develop their products (Kubernetes, OpenShift,
etc.) in Go?
If you answered yes to at least one of those questions, this presentation is for
you. I'm going to share my experience from transitioning from a long-time Java
developer to a Go-dev in mere days. That’s all the effort it took to feel comfortable
in the extensive ecosystem surrounding the Go language (also known as “Go-land”).
Once there, you'll be programming in an "expressive, concise, clean, efficient
(...), fast, statically typed, compiled language that feels like a dynamically
typed, interpreted language".

My talk will be divided into 3 main parts to give you a better understanding
of the power of Golang:

1. Covers benefits from transition
2. Java and Go comparison:
   * General syntax
   * Data structures
   * Interfaces and OOP
   * Concurrency
   * Error handling
   * Reflection
   * Web development
3. Summary

Useful resources
----------------
Something that sets Go apart from Java, is that Go gives you the ability to manage
your memory layout. With Go, you can combine things that would be separate
allocations in other garbage collected languages.
http://www.cockroachlabs.com/blog/how-to-optimize-garbage-collection-in-go/

https://golang.org/doc/effective_go.html
https://github.com/golang/go/wiki
http://features.slashdot.org/story/15/11/18/1748247/interviews-alan-donovan-and-brian-kernighan-answer-your-questions
https://blog.golang.org/share-memory-by-communicating


## Ideas

dot Go 2015 - Rob Pike - Simplicity is Complicated:
* Go is simple, because it hides complexity
* Go has a small no of features, but the right features the creators (Pike & ? & ?)
  agreed on
* additional features complicate the language unnecessarily
* clean procedural language designed for scalabale cloud software
* easily readable for java/c programmers
* simplest concurency available (goroutines, channels)
* interfaces - just a set of methods, no data; adds dynamic typic into static language
* packages - go get,
* production ready web server in a few lines of code

* finish with choosing the wrong platform http://www.paulgraham.com/startupmistakes.html

core concept in Go’s type system: instead of designing our abstractions in terms of what kind of data our types can hold, we design our abstractions in terms of what actions our types can execute.
