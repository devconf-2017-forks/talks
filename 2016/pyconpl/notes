# Colorful deployments


## Description

You have created your awesome application, deployed it for the very first time,
now what? How you handle application updates, what are the possible approaches?
Do you pick your deployment strategy by your favorite color, blue-green, canary,
other? Yet, the decision is very simple, or I should rather say switching from
one strategy to other is as simple as never before. During this presentation
I will show you three different deployment strategies and how to apply those
to sample python application.


## Audience

Developers interested in: automated CI/CD flows, containers. PaaS solutions supporting the former.


## Objective

Attendees leaving the room will learn about different deployments strategies. How
to introduce fully automated CI/CD flow by leveraging  containers, combined with
21st century cluster management, hidden in the latest version of OpenShift.


## Detailed abstract

In DevOps, we define Continuous Deployment (CD) as the process of automatically
deploying your application based on certain conditions. Usually, those conditions
require running tests, verifying if the new version of the application has
deployed successfully and if it is working correctly. This may sound simple enough,
but instrumenting this kind of process can be a big challenge.

During this presentation we will start by reviewing three different deployment
strategies: blue-green, canary and rollback. I'll demonstrate how each of them
can be applied to a sample python application, pointing out differences, possible
implementations, and pitfalls along the way.

From that foundation, we will then see how simple it is to implement any or all
of these three strategies in an application when we deploy it on the OpenShift
Platform-as-a-Service system. We will also review how easy it is to switch from
one deployment strategy to other on OpenShift. If time allows, we will talk about
creating custom deployment strategies on OpenShift as well.

We will finish our session with a live demo that showcases how easy it is to run
all sorts of applications on top of OpenShift, leveraging its features to simplify
deployment in ways that make both development and operations teams happy. After
the session, you can play around with the accompanying code repository that we
used in the demo, which includes instructions how to run it on your own.


## Outline

1. What is CI/CD
  * Continuous Integration
  * Continuous Delivery vs Continuous Deployment
1. Continuous Deployment
  * Low-Risk Deployments Are Incremental
  * Release overhead reduces opportunity to iterate
  * Decouple Deployment and Release (?)
  * Optimize for Resilience
1. Deployment planning
1. Deployment strategies
  * Blue-Green
  * Canary release
1. Rollback
1. Automatic scaling
1. Live demo on OpenShift
  * Sample application architecture
  * Blue-Green deployment
  * Canary release
  * Rollback
1. Q&A


## Links


https://github.com/openshift/origin/blob/master/examples/deployment/README.md
https://htmlpreview.github.io/?https://github.com/redhat-helloworld-msa/helloworld-msa/blob/master/readme.html

http://martinfowler.com/bliki/BlueGreenDeployment.html
https://www.thoughtworks.com/insights/blog/implementing-blue-green-deployments-aws
https://medium.com/aws-activate-startup-blog/upgrades-without-tears-part-1-introduction-to-blue-green-deployment-on-aws-e5bcf90eb60b#.t1jxylpdt

https://blog.openshift.com/openshift-3-demo-part-11-ab-deployments/

http://martinfowler.com/bliki/CanaryRelease.html
http://stackoverflow.com/questions/23746038/canary-release-strategy-vs-blue-green

http://docs.octopusdeploy.com/display/OD/Rolling+deployments
http://about.getset.com/developer-blog/2014/10/29/anatomy-of-a-rolling-deploy

## Ideas

Deployment planning
Deploy small, deploy frequent = easy rollback, easy to know what to fix
Automatic scaling (HPA in OpenShift/k8s)
